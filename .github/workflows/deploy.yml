name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 部署到生产环境
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: []
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Deploy to Vercel (Frontend)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'

      # 可选：部署到其他平台
      # - name: Deploy API to Railway
      #   uses: railway-app/railway-action@v1
      #   with:
      #     api-token: ${{ secrets.RAILWAY_TOKEN }}
      #     project-id: ${{ secrets.RAILWAY_PROJECT_ID }}
      #     service: api

      # - name: Deploy to AWS ECS
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: .aws/task-definition.json
      #     service: tech-news-service
      #     cluster: tech-news-cluster

  # 数据库迁移
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd packages/database
          pnpm prisma migrate deploy

  # 健康检查
  health-check:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check API
        run: |
          curl -f ${{ secrets.API_URL }}/health || exit 1

      - name: Health check Frontend
        run: |
          curl -f ${{ secrets.FRONTEND_URL }} || exit 1

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 部署成功！生产环境已更新。'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ 部署失败！请检查日志。'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}