// 科技新闻聚合平台 - 数据库模式定义
// 基于架构文档的数据模型设计

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  USER      // 普通用户
  EDITOR    // 编辑者
  ADMIN     // 管理员
}

// 用户状态枚举
enum UserStatus {
  PENDING   // 待验证
  ACTIVE    // 活跃
  INACTIVE  // 非活跃
  SUSPENDED // 暂停
}

// 用户表
model User {
  id            String      @id @default(cuid())
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  name          String?
  image         String?
  role          UserRole    @default(USER)
  status        UserStatus  @default(PENDING)
  
  // 密码相关（用于凭据登录）
  password      String?
  
  // 个人资料
  firstName     String?     @map("first_name")
  lastName      String?     @map("last_name")
  bio           String?
  timezone      String?     @default("UTC")
  language      String?     @default("zh-CN")
  
  // 偏好设置
  preferences   Json?       // 用户偏好设置JSON
  
  // 时间戳
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  lastLoginAt   DateTime?   @map("last_login_at")
  
  // 关联关系
  accounts      Account[]
  sessions      Session[]
  contentReviews ContentReview[]
  userActivities UserActivity[]
  
  @@map("users")
}

// NextAuth.js 账户表
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js 会话表
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// NextAuth.js 验证令牌表
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 密码重置令牌表
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("password_reset_tokens")
}

// 信息源类型枚举
enum SourceType {
  RSS
  API
  AI_QUERY
  EMAIL
  MANUAL
}

// 信息源状态枚举
enum SourceStatus {
  ACTIVE
  INACTIVE
  ERROR
  RATE_LIMITED
}

// 信息源表
model Source {
  id          String       @id @default(cuid())
  name        String
  type        SourceType
  url         String?
  status      SourceStatus @default(ACTIVE)
  
  // 配置信息
  config      Json?        // 源特定配置
  
  // 统计信息
  lastFetchAt DateTime?    @map("last_fetch_at")
  fetchCount  Int          @default(0) @map("fetch_count")
  errorCount  Int          @default(0) @map("error_count")
  lastError   String?      @map("last_error")
  
  // 时间戳
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  // 关联关系
  content     Content[]
  
  @@map("sources")
}

// 内容状态枚举
enum ContentStatus {
  RAW
  PROCESSING
  PROCESSED
  REVIEWED
  PUBLISHED
  REJECTED
}

// 内容表
model Content {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  content     String?       @db.Text
  url         String?
  imageUrl    String?       @map("image_url")
  
  // 分类和标签
  category    String?
  tags        String[]      @default([])
  
  // 状态和评分
  status      ContentStatus @default(RAW)
  score       Float?        // AI评分
  priority    Int           @default(0)
  
  // 来源信息
  sourceId    String        @map("source_id")
  sourceUrl   String?       @map("source_url")
  publishedAt DateTime?     @map("published_at")
  
  // 元数据
  metadata    Json?         // 额外的元数据
  
  // 时间戳
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // 关联关系
  source      Source        @relation(fields: [sourceId], references: [id])
  reviews     ContentReview[]
  contentTags ContentTag[]
  
  @@map("content")
}

// 内容标签表（多对多关系）
model ContentTag {
  id        String   @id @default(cuid())
  contentId String   @map("content_id")
  tag       String
  
  createdAt DateTime @default(now()) @map("created_at")
  
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, tag])
  @@map("content_tags")
}

// 审核动作枚举
enum ReviewAction {
  APPROVE
  REJECT
  EDIT
  FLAG
  PRIORITY_BOOST
  PRIORITY_LOWER
}

// 内容审核表
model ContentReview {
  id        String       @id @default(cuid())
  contentId String       @map("content_id")
  userId    String       @map("user_id")
  action    ReviewAction
  comment   String?      @db.Text
  
  // 时间戳
  createdAt DateTime     @default(now()) @map("created_at")
  
  // 关联关系
  content   Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id])
  
  @@map("content_reviews")
}

// 每日摘要表
model DailyDigest {
  id          String   @id @default(cuid())
  date        DateTime @unique @db.Date
  title       String
  summary     String?  @db.Text
  contentIds  String[] @map("content_ids") // 内容ID数组
  
  // 统计信息
  totalItems  Int      @default(0) @map("total_items")
  
  // 时间戳
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("daily_digests")
}

// 用户活动表
model UserActivity {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String   // 活动类型
  details   Json?    // 活动详情
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_activities")
}

// AI任务表
model AITask {
  id          String   @id @default(cuid())
  type        String   // 任务类型
  status      String   // 任务状态
  input       Json?    // 输入数据
  output      Json?    // 输出结果
  error       String?  @db.Text
  
  // 执行信息
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("ai_tasks")
}

// 系统配置表
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("system_configs")
}
